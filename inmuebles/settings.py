"""
Django settings for inmuebles project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from datetime import timedelta
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
#BASE_DIR = Path(__file__).resolve().parent.parent
BASE_DIR=os.path.dirname(os.path.dirname(os.path.abspath(__file__))) #-------------------------------


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-8w_=3zihd4tvc2+w7%q&#ji8vghvpdqrwj0tpzaf4#b=#-emk%'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*'] #PONEMOS DENTRO DEL CORCHETE "*" PARA QUE PERMITA LA ENTRADA DESDE CUALQUIER "url"


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'inmuebleslist_app',
    'rest_framework',
    'rest_framework.authtoken', #PERMITE AGREGAR UNA TABLA EN DONDE SE ALMACENEN LOS TOKEN EN NUESTRA BASE DE DATOS
    'user_app',
    'django_filters', #PERMITE FILTRAR REGISTROS Y HACER BÚSQUEDAS
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', #----------------------------------------------------
]

ROOT_URLCONF = 'inmuebles.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'inmuebles.wsgi.application'

AUTH_USER_MODEL = 'user_app.Account' #MODIFICAMOS EL MODELO DE USUARIO A USAR


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'd46cgbk88qr7mp',
        'USER': 'vosjqoapbtanvp',
        'PASSWORD': '456c5a4cff4cbaca014da88200535c85e3a6084686adfac56120cf116f4d3b01',
        'HOST': 'ec2-34-227-120-79.compute-1.amazonaws.com',
        'PORT': '5432'
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_ROOT=os.path.join(BASE_DIR, 'staticfiles') #------------------------------------------
STATICFILES_STORAGE='whitenoise.storage.CompressedManifestStaticFilesStorage' #----------------------------


STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


#RESTRINGIR EL ACCESO A USUARIOS SIN LOGEO

#REST_FRAMEWORK = {
#    'DEFAULT_PERMISSION_CLASSES':[
#        'rest_framework.permissions.IsAuthenticated',
#    ]
#}

#-------------------------AUTENTICACIÓN POT MEDIO DE UN TOKEN-------------------------------------------

REST_FRAMEWORK = {
    #'DEFAULT_AUTHENTICATION_CLASSES': [
    #    'rest_framework.authentication.BasicAuthentication',
    #]
    'DEFAULT_AUTHENTICATION_CLASSES': [
        #'rest_framework.authentication.TokenAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '50/day',
        'user': '100/day',
        'comentario-create': '20/day',
        'comentario-list': '80/day',
        'comentario-detail': '30/day',
    }
}

from datetime import timedelta

SIMPLE_JWT = {
    'ROTATE_REFRESH_TOKENS': True, #COMO LOS "TOKEN" CADUCAN CADA 5 MINUTOS, CADA QUE CADUQUE UNO, NOS VA A MANDAR UNO NUEVO
    'ACCESS_TOKEN_LIFETIME': timedelta(days=365),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=365),
}


try:
    from .local_settings import DATABASES, DEBUG
except ImportError as e:
    print('Error:', e.msg)